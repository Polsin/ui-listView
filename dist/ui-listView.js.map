{"version":3,"sources":["ui-listView.js","templates.js","ui-listViewAnchor.js","ui-listViewCell.js"],"names":[],"mappings":"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","file":"ui-listView.js","sourcesContent":["/**\n * @ngdoc module\n * @name sl.ui-listView\n * @description\n * Displays a list of items.  Designed to handle large data sets.\n */\nangular.module(\"sl.ui-listView\", [\n    \"sl.ui-listView.templates\"\n]).directive(\"uiListView\", ($rootScope, $parse) => {\n    var arrayRegexp = /([\\s\\S]+?)\\s+(?:in)\\s+([\\s\\S]+?)\\s*$/; // \"item in array [|filterName]\"\n    \n    var defaultOptions = {\n        style: \"default\"\n    };\n    \n    /**\n     * Run digest only if it is not currently running.\n     */\n    function safeDigest ($scope) {\n        if (!$scope.$root.$$phase) {\n            $scope.$digest();\n        }\n    }\n    \n    /**\n     * ngdoc controller\n     * @description\n     * Displays a list of items.  Designed to handle large data sets.  The list view's controller\n     * is added to the options object to provide an API.\n     * @class\n     */\n    class UIListView {\n        \n        constructor ($scope) {\n            this.$scope = $scope;\n            this.cells = [];\n            this.preferredHeight = 48;\n            this._clear();\n        }\n        \n        /**\n         * Request that the row offsets be recomputed. It will perform the update\n         * after the current digest.  This is useful if the offsets might be updated\n         * multiple times during a single digest.\n         * @param {Number} [startIndex] The index to start recomputing from.\n         * @method\n         */\n        requestOffsetUpdate (startIndex) {\n            var request = this._request;\n            if (!request) {\n                this._request = request = {\n                    startIndex: startIndex\n                };\n                this.$scope.$$postDigest(() => {\n                    this.updateRowOffsets(request.startIndex);\n                    this._request = null;\n                    safeDigest(this.$scope);\n                });\n            }\n            request.startIndex = Math.min(request.startIndex, startIndex);\n        }\n        \n        /**\n         * Recompute the row offsets.\n         * @param {Number} [startIndex] The index to start recomputing from.\n         * @method\n         */\n        updateRowOffsets (startIndex) {\n            startIndex = startIndex || 0;\n            var rows = this.rows;\n            var row;\n            var currentOffset = rows[startIndex].offset;\n            var i;\n            \n            for (i = startIndex; i < rows.length; i++) {\n                row = rows[i];\n                row.offset = currentOffset;\n                if (row.cell) {\n                    this._callCellDelegate(row.cell, \"offsetDidChange\", row.offset);\n                }\n                currentOffset += row.height;\n            }\n            this.layout();\n        }\n        \n        /**\n         * Updates the cells when the visible range changes.\n         * @method\n         */\n        updateCells () {\n            var range = this.visibleRange;\n            var offset = range.index;\n            var lastIndex = offset + range.length;\n            var rows = this.rows;\n            var cells = this.cells;\n            var cell, row, previousRow;\n            \n            cells.length = range.length;\n            for(var i = offset; i < lastIndex; i++) {\n                cell = cells[i - offset];\n                row = rows[i];\n                if (!cell) {\n                    cell = cells[i - offset] = {};\n                }\n                if (cell.row) {\n                    cell.row.cell = null;\n                }\n                row.cell = cell;\n                cell.row = row;\n                cell.item = rows[i].item;\n                cell.index = i;\n                if (previousRow) {\n                    row.offset = previousRow.offset + previousRow.height;\n                }\n                this._callCellDelegate(cell, \"rowDidChange\", row);\n                previousRow = row;\n            }\n        }\n        \n        /**\n         * Updates the anchor position when the viewport is changes.\n         * @method\n         */\n        updateAnchor () {\n            var scrollHeight = this.getScrollHeight();\n            var lastScrollHeight = this._lastScrollHeight;\n            if (this.anchor) {\n                this.anchor.updateAnchor(scrollHeight);\n                this._lastScrollHeight = scrollHeight;\n            }\n            return scrollHeight !== lastScrollHeight;\n        }\n        \n        /**\n         * Updates the visible range when the viewport changes.\n         * @return {Boolean} True if the range is changed.\n         * @method\n         */\n        updateRange () {\n            var viewport = this.viewport;\n            var topOffset = viewport.offset;\n            var bottomOffset = topOffset + viewport.height;\n            \n            var rows = this.rows;\n            var row;\n            \n            var mid = this._findVisibleRowIndex(topOffset, bottomOffset);\n            var foundFirst, foundLast;\n            var firstIndex = 0, lastIndex = 0;\n            var offset = 0;\n            \n            var range = this.visibleRange;\n            \n            while(!foundFirst || !foundLast) {\n                if (!foundFirst) {\n                    row = rows[mid - offset];\n                    if (!row || row.offset + row.height < topOffset) {\n                        foundFirst = true;\n                        firstIndex = Math.max(mid - offset, 0);\n                    }\n                }\n                if (!foundLast) {\n                    row = rows[mid + offset];\n                    if (!row || row.offset > bottomOffset) {\n                        foundLast = true;\n                        lastIndex = Math.min(mid + offset, rows.length);\n                    }\n                }\n                offset++;\n            }\n            \n            this.visibleRange = {\n                index: firstIndex,\n                length: lastIndex - firstIndex,\n                total: rows.length\n            };\n            return range.index !== this.visibleRange.index || range.length !== this.visibleRange.length;\n        }\n        \n        /**\n         * Set a new viewport.  This will relayout the list to that viewport.  This should not be called\n         * manually.\n         * @return {Boolean} True if the range is changed.\n         * @method\n         */\n        setViewport (offset, height) {\n            this.viewport = {\n                offset: offset,\n                height: height\n            };\n            return this.layout();\n        }\n        \n        /**\n         * Relayout the list view.  This is normally called when the viewport is updated.\n         * @return {Boolean} True if the range is changed.\n         * @method\n         */\n        layout () {\n            this.updateAnchor();\n            if (this.updateRange()) {\n                this.updateCells();\n                this.options.range = this.visibleRange;\n                return true;\n            }\n            return false;\n        }\n        \n        /**\n         * The total scroll height of the list view.\n         * @return {Number}\n         * @method\n         */\n        getScrollHeight () {\n            var len = this.rows.length;\n            var lastRow = this.rows[len - 1];\n            return len ? lastRow.offset + lastRow.height : 0;\n        }\n        \n        /**\n         * Retrieve the styles for a cell.  This is used to set values like the cell's\n         * current \"top\" position.\n         * @param {sl.ui-listView.Cell} cell\n         */\n        getCellStyle (cell) {\n            return {\n                top: cell.row.offset + \"px\"\n            };\n        }\n        \n        /**\n         * Reload the list view from scratch.  The rows will be\n         * computed.\n         * @param {Object[]} [items] Optionally change the list view's items;\n         * @method\n         * @private\n         */\n        _reload (items) {\n            this._clear();\n            if (items) {\n                this.originalItems = items;\n            } else {\n                items = this.originalItems;\n            }\n            if (this.rows.length > items.length) {\n                this.rows.length = items.length;\n            }\n            this.cells.length = items.length;\n            this._rebuildRows(items);\n        }\n        \n        /**\n         * Clears out and resets the list view's data.\n         * @param {Boolean} [removeRows] Also remove the row meta data objects;\n         * @method\n         * @private\n         */\n        _clear (removeRows) {\n            this.originalItems = [];\n            if (!this.rows || removeRows) {\n                this.rows = [];\n            }\n            this.visibleRange = {\n                index: 0,\n                length: 0\n            };\n        }\n        \n        /**\n         * Rebuilds all the rows with the given items.\n         * @param {Object[]} items\n         * @method\n         * @private\n         */\n        _rebuildRows (items) {\n            var offset = 0;\n            var rows = this.rows;\n            var row;\n            \n            for (var i = 0; i < items.length; i++) {\n                row = rows[i];\n                if (!row) {\n                    row = rows[i] = {\n                        height: this.preferredHeight,\n                        offset: offset\n                    };\n                } \n                row.index = i;\n                row.item = items[i];\n                row.cell = null;\n                offset += row.height;\n            }\n        }\n        \n        /**\n         * Tries to efficiently find a visible row within the given offset range.  It returns the\n         * index of the first row found.\n         * @param {Number} topOffset\n         * @param {Number} bottomOffset\n         * @method\n         * @private\n         */\n        _findVisibleRowIndex (topOffset, bottomOffset) {\n            var range = this.visibleRange;\n            var rows = this.rows;\n            var row;\n            var mid = Math.floor(range.index + (range.length / 2));\n            var start = 0, end = rows.length;\n            \n            if (mid > rows.length - 1) {\n                mid = Math.max(rows.length - 1, 0);\n            }\n            \n            while (end >= start && rows[mid]) {\n                row = rows[mid];\n                if (row.offset + row.height < topOffset) {\n                    start = mid + 1;\n                } else if (row.offset > bottomOffset) {\n                    end = mid - 1;\n                } else {\n                    break; // first visible row found.\n                }\n                mid = start + Math.round((end - start) / 2);\n            }\n            \n            return mid;\n        }\n        \n        /**\n         * Call a method on the cell's delegate.\n         * @param {sl.ui-listView.Cell} cell\n         * @param {String} methodName\n         * @param {Object} arg1\n         * @param {Object} arg2\n         * @param {Object} arg3\n         * @method\n         * @private\n         */\n        _callCellDelegate (cell, methodName, arg1, arg2, arg3) {\n            var delegate = cell.delegate;\n            if (delegate) {\n                delegate[methodName](arg1, arg2, arg3);\n            }\n        }\n        \n    }\n    \n    /**\n     * @ngdoc directive\n     * @name ui-listView\n     * @description\n     * Displays a list of items.  Designed to handle large data sets.\n     */\n    return {\n        templateUrl: \"ui-listView.tpl.html\",\n        replace: true, // TODO: remove\n        transclude: true,\n        scope: { options: \"=\"},\n        \n        controller: UIListView,\n        controllerAs: \"listView\",\n        \n        require: \"uiListView\",\n        compile (element, attrs) {\n            var match = arrayRegexp.exec(attrs.uiListView);\n            if (!match) {\n                throw Error(\"Invalid expression.  It must be in the form \\\"item in Array\\\" \"); \n            }\n            var itemIdentifier = match[1];\n            var arrayGetter = $parse(match[2]);\n            \n            return function ($scope, element, attrs, listView) {\n                var rawElement = element[0];\n                listView.itemIdentifier = itemIdentifier;\n                \n                /**\n                 * Update the viewport.\n                 */\n                function updateListView () {\n                    var scrollTop = rawElement.scrollTop;\n                    return listView.setViewport(scrollTop, rawElement.clientHeight);\n                }\n                \n                function updateOptions (options, oldOptions) {\n                    if (oldOptions) {\n                        if (oldOptions.style) {\n                            element.removeClass(\"ui-list-view-\" + oldOptions.style);\n                        }\n                    }\n                    if (options.style) {\n                        element.addClass(\"ui-list-view-\" + options.style);\n                    }\n                }\n                \n                function addDefaultOptions (options) {\n                    for (var key in defaultOptions) {\n                        if (!options.hasOwnProperty(key) && defaultOptions.hasOwnProperty(key)) {\n                            options[key] = defaultOptions[key];\n                        }\n                    }\n                }\n                \n                $scope.$watch(\"options\", (options, oldOptions) => {\n                    options = options || {};\n                    addDefaultOptions(options);\n                    options.listView = listView;\n                    listView.options = options;\n                    updateOptions(options, oldOptions);\n                    listView._reload();\n                });\n                \n                var isScrolling; // For performance, don't retrieve items while the list is scrolling.\n                var endScrollDigestTimer;\n                $scope.$watchCollection(() => {\n                    return !isScrolling ? arrayGetter($scope.$parent) : listView.originalItems;\n                }, (items) => {\n                    listView._reload(items);\n                    updateListView();\n                });\n                \n                $scope.$watch(() => {\n                    return element[0].clientHeight;\n                }, () => {\n                    updateListView();\n                });\n                \n                function handleScroll () {\n                    if (updateListView()) {\n                        isScrolling = true;\n                        safeDigest($scope);\n                        isScrolling = false;\n                    }\n                    clearTimeout(endScrollDigestTimer);\n                    endScrollDigestTimer = setTimeout(() => {\n                        updateListView();\n                        safeDigest($scope);\n                    });\n                }\n                \n                element[0].addEventListener(\"scroll\", handleScroll, false);\n                \n                /** \n                * Update row sizes and offsets if the window is resized.\n                */\n                function handleResize () {\n                    updateListView();\n                    safeDigest($scope);\n                }\n                window.addEventListener(\"resize\", handleResize);\n                \n                $scope.$on(\"$destroy\", () => {\n                    window.removeEventListener(\"resize\", handleResize);\n                });\n            };\n        }\n    };\n    \n});\n","angular.module(\"sl.ui-listView.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"ui-listView.tpl.html\",\"<div class=\\\"ui-list-view\\\">\\n    <div class=\\\"ui-list-view-cell\\\" ui-list-view-cell ng-repeat=\\\"cell in listView.cells\\\">\\n        <div class=\\\"ui-list-view-cell-content\\\"></div>\\n    </div>\\n    <div class=\\\"ui-list-view-anchor\\\" ui-list-view-anchor></div>\\n</div>\");}]);","/**\n * @ngdoc directive\n * @name uiListViewAnchor\n * @description\n * The anchor is used to set the list view's scroll height based on the last row's offset and height.\n * \n * @private\n */\nangular.module(\"sl.ui-listView\").directive(\"uiListViewAnchor\", () => {\n    \n    return {\n        require: \"^uiListView\",\n        link ($scope, element, attr, listView) {\n            var rawElement = element[0];\n            \n            listView.anchor = {\n                updateAnchor (scrollHeight) {\n                    rawElement.style.top = scrollHeight + \"px\";\n                }\n            };\n            \n        }\n    };\n    \n});\n","/**\n * @ngdoc directive\n * @name uiListViewCell\n * @description\n * The visual representation of a list view cell.  A cell is a container\n * to a visible row.  As the list is scrolled, the cells are updated with the\n * current set of visible rows to display.\n * \n * Certain choices were made for performance reasons.  For example, instead of\n * watchers, the directive acts as a delegate to the cell.  When the cell is updated, it\n * delegates those changes to the directive.\n * \n * @private\n */\nangular.module(\"sl.ui-listView\").directive(\"uiListViewCell\", () => {\n    \n    return {\n        require: \"^uiListView\",\n        link ($scope, element, attrs, listView, $transclude) {\n            var rawElement = element[0];\n            var cell = $scope.cell;\n            var transcludeScope;\n            \n            $transclude((clone, scope) => {\n                var content = element.children();\n                transcludeScope = scope;\n                updateRow(cell.row);\n                content.empty();\n                content.append(clone);\n            });\n            \n            function updateOffset(offset) {\n                rawElement.style.top = offset + \"px\";\n            }\n            \n            function updateSize() {\n                var height = rawElement.clientHeight;\n                var row = cell.row;\n                if (height !== row.height) {\n                    row.height = height;\n                    listView.requestOffsetUpdate(row.index);\n                }\n            }\n            \n            function updateRow (row) {\n                transcludeScope[listView.itemIdentifier] = row.item;\n                transcludeScope.$index = row.index;\n                transcludeScope.$first = row.index === 0;\n                transcludeScope.$last = row.index === listView.rows.length - 1;\n                updateOffset(row.offset);\n            }\n            \n            $scope.$watch(() => {\n                return cell.row.index + \"-\" + rawElement.clientHeight;\n            }, () => {\n                updateSize();\n            });\n            \n            cell.delegate = {\n                rowDidChange: updateRow,\n                offsetDidChange: updateOffset\n            };\n                \n            updateRow(cell.row);\n        }\n    };\n    \n});\n"],"sourceRoot":"/source/"}