{"version":3,"sources":["ui-listView.js","templates.js"],"names":[],"mappings":"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","file":"ui-listView.js","sourcesContent":["/**\n * @ngdoc module\n * @name sl.ui-listView\n * @description\n * Displays a list of items.  Designed to handle large data sets.\n */\nangular.module(\"sl.ui-listView\", [\n\t\"sl.ui-listView.templates\"\n]).directive(\"uiListView\", ($rootScope, $parse) => {\n\tvar arrayRegexp = /([\\s\\S]+?)\\s+(?:in)\\s+([\\s\\S]+?)\\s*$/; // \"item in array [|filterName]\"\n\t\n\tvar defaultOptions = {\n\t\tstyle: \"default\"\n\t};\n\t\n\t/**\n\t * Run digest only if it is not currently running.\n\t */\n\tfunction safeDigest ($scope) {\n\t\tif (!$scope.$root.$$phase) {\n\t\t\t$scope.$digest();\n\t\t}\n\t}\n\t\n\t/**\n\t * ngdoc controller\n\t * @description\n\t * Displays a list of items.  Designed to handle large data sets.  The list view's controller\n\t * is added to the options object to provide an API.\n\t * @class\n\t */\n\tclass UIListView {\n\t\t\n\t\tconstructor ($scope) {\n\t\t\tthis.$scope = $scope;\n\t\t\tthis.cells = [];\n\t\t\tthis.preferredHeight = 48;\n\t\t\tthis._clear();\n\t\t}\n\t\t\n\t\t/**\n\t\t * Request that the row offsets be recomputed. It will perform the update\n\t\t * after the current digest.  This is useful if the offsets might be updated\n\t\t * multiple times during a single digest.\n\t\t * @param {Number} [startIndex] The index to start recomputing from.\n\t\t * @method\n\t\t */\n\t\trequestOffsetUpdate (startIndex) {\n\t\t\tvar request = this._request;\n\t\t\tif (!request) {\n\t\t\t\tthis._request = request = {\n\t\t\t\t\tstartIndex: startIndex\n\t\t\t\t};\n\t\t\t\tthis.$scope.$$postDigest(() => {\n\t\t\t\t\tthis.updateRowOffsets(request.startIndex);\n\t\t\t\t\tthis._request = null;\n\t\t\t\t\tsafeDigest(this.$scope);\n\t\t\t\t});\n\t\t\t}\n\t\t\trequest.startIndex = Math.min(request.startIndex, startIndex);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Recompute the row offsets.\n\t\t * @param {Number} [startIndex] The index to start recomputing from.\n\t\t * @method\n\t\t */\n\t\tupdateRowOffsets (startIndex) {\n\t\t\tstartIndex = startIndex || 0;\n\t\t\tvar rows = this.rows;\n\t\t\tvar row;\n\t\t\tvar currentOffset = rows[startIndex].offset;\n\t\t\tvar i;\n\t\t\t\n\t\t\tfor (i = startIndex; i < rows.length; i++) {\n\t\t\t\trow = rows[i];\n\t\t\t\trow.offset = currentOffset;\n\t\t\t\tif (row.cell) {\n\t\t\t\t\tthis._callCellDelegate(row.cell, \"offsetDidChange\", row.offset);\n\t\t\t\t}\n\t\t\t\tcurrentOffset += row.height;\n\t\t\t}\n\t\t\tthis.layout();\n\t\t}\n\t\t\n\t\t/**\n\t\t * Updates the cells when the visible range changes.\n\t\t * @method\n\t\t */\n\t\tupdateCells () {\n\t\t\tvar range = this.visibleRange;\n\t\t\tvar offset = range.index;\n\t\t\tvar lastIndex = offset + range.length;\n\t\t\tvar rows = this.rows;\n\t\t\tvar cells = this.cells;\n\t\t\tvar cell, row, previousRow;\n\t\t\t\n\t\t\tcells.length = range.length;\n\t\t\tfor(var i = offset; i < lastIndex; i++) {\n\t\t\t\tcell = cells[i - offset];\n\t\t\t\trow = rows[i];\n\t\t\t\tif (!cell) {\n\t\t\t\t\tcell = cells[i - offset] = {};\n\t\t\t\t}\n\t\t\t\tif (cell.row) {\n\t\t\t\t\tcell.row.cell = null;\n\t\t\t\t}\n\t\t\t\trow.cell = cell;\n\t\t\t\tcell.row = row;\n\t\t\t\tcell.item = rows[i].item;\n\t\t\t\tcell.index = i;\n\t\t\t\tif (previousRow) {\n\t\t\t\t\trow.offset = previousRow.offset + previousRow.height;\n\t\t\t\t}\n\t\t\t\tthis._callCellDelegate(cell, \"rowDidChange\", row);\n\t\t\t\tpreviousRow = row;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/**\n\t\t * Updates the anchor position when the viewport is changes.\n\t\t * @method\n\t\t */\n\t\tupdateAnchor () {\n\t\t\tvar scrollHeight = this.getScrollHeight();\n\t\t\tvar lastScrollHeight = this._lastScrollHeight;\n\t\t\tif (this.anchor) {\n\t\t\t\tthis.anchor.updateAnchor(scrollHeight);\n\t\t\t\tthis._lastScrollHeight = scrollHeight;\n\t\t\t}\n\t\t\treturn scrollHeight !== lastScrollHeight;\n\t\t}\n\t\t\n\t\t/**\n\t\t * Updates the visible range when the viewport changes.\n\t\t * @return {Boolean} True if the range is changed.\n\t\t * @method\n\t\t */\n\t\tupdateRange () {\n\t\t\tvar viewport = this.viewport;\n\t\t\tvar topOffset = viewport.offset;\n\t\t\tvar bottomOffset = topOffset + viewport.height;\n\t\t\t\n\t\t\tvar rows = this.rows;\n\t\t\tvar row;\n\t\t\t\n\t\t\tvar mid = this._findVisibleRowIndex(topOffset, bottomOffset);\n\t\t\tvar foundFirst, foundLast;\n\t\t\tvar firstIndex = 0, lastIndex = 0;\n\t\t\tvar offset = 0;\n\t\t\t\n\t\t\tvar range = this.visibleRange;\n\t\t\t\n\t\t\twhile(!foundFirst || !foundLast) {\n\t\t\t\tif (!foundFirst) {\n\t\t\t\t\trow = rows[mid - offset];\n\t\t\t\t\tif (!row || row.offset + row.height < topOffset) {\n\t\t\t\t\t\tfoundFirst = true;\n\t\t\t\t\t\tfirstIndex = Math.max(mid - offset, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!foundLast) {\n\t\t\t\t\trow = rows[mid + offset];\n\t\t\t\t\tif (!row || row.offset > bottomOffset) {\n\t\t\t\t\t\tfoundLast = true;\n\t\t\t\t\t\tlastIndex = Math.min(mid + offset, rows.length);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toffset++;\n\t\t\t}\n\t\t\t\n\t\t\tthis.visibleRange = {\n\t\t\t\tindex: firstIndex,\n\t\t\t\tlength: lastIndex - firstIndex\n\t\t\t};\n\t\t\treturn range.index !== this.visibleRange.index || range.length !== this.visibleRange.length;\n\t\t}\n\t\t\n\t\t/**\n\t\t * Set a new viewport.  This will relayout the list to that viewport.  This should not be called\n\t\t * manually.\n\t\t * @return {Boolean} True if the range is changed.\n\t\t * @method\n\t\t */\n\t\tsetViewport (offset, height) {\n\t\t\tthis.viewport = {\n\t\t\t\toffset: offset,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\treturn this.layout();\n\t\t}\n\t\t\n\t\t/**\n\t\t * Relayout the list view.  This is normally called when the viewport is updated.\n\t\t * @return {Boolean} True if the range is changed.\n\t\t * @method\n\t\t */\n\t\tlayout () {\n\t\t\tthis.updateAnchor();\n\t\t\tif (this.updateRange()) {\n\t\t\t\tthis.updateCells();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t/**\n\t\t * The total scroll height of the list view.\n\t\t * @return {Number}\n\t\t * @method\n\t\t */\n\t\tgetScrollHeight () {\n\t\t\tvar len = this.rows.length;\n\t\t\tvar lastRow = this.rows[len - 1];\n\t\t\treturn len ? lastRow.offset + lastRow.height : 0;\n\t\t}\n\t\t\n\t\t/**\n\t\t * Retrieve the styles for a cell.  This is used to set values like the cell's\n\t\t * current \"top\" position.\n\t\t * @param {sl.ui-listView.Cell} cell\n\t\t */\n\t\tgetCellStyle (cell) {\n\t\t\treturn {\n\t\t\t\ttop: cell.row.offset + \"px\"\n\t\t\t};\n\t\t}\n\t\t\n\t\t/**\n\t\t * Reload the list view from scratch.  The rows will be\n\t\t * computed.\n\t\t * @param {Object[]} [items] Optionally change the list view's items;\n\t\t * @method\n\t\t * @private\n\t\t */\n\t\t_reload (items) {\n\t\t\tthis._clear();\n\t\t\tif (items) {\n\t\t\t\tthis.originalItems = items;\n\t\t\t} else {\n\t\t\t\titems = this.originalItems;\n\t\t\t}\n\t\t\tif (this.rows.length > items.length) {\n\t\t\t\tthis.rows.length = items.length;\n\t\t\t}\n\t\t\tthis.cells.length = items.length;\n\t\t\tthis._rebuildRows(items);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Clears out and resets the list view's data.\n\t\t * @param {Boolean} [removeRows] Also remove the row meta data objects;\n\t\t * @method\n\t\t * @private\n\t\t */\n\t\t_clear (removeRows) {\n\t\t\tthis.originalItems = [];\n\t\t\tif (!this.rows || removeRows) {\n\t\t\t\tthis.rows = [];\n\t\t\t}\n\t\t\tthis.visibleRange = {\n\t\t\t\tindex: 0,\n\t\t\t\tlength: 0\n\t\t\t};\n\t\t}\n\t\t\n\t\t/**\n\t\t * Rebuilds all the rows with the given items.\n\t\t * @param {Object[]} items\n\t\t * @method\n\t\t * @private\n\t\t */\n\t\t_rebuildRows (items) {\n\t\t\tvar offset = 0;\n\t\t\tvar rows = this.rows;\n\t\t\tvar row;\n\t\t\t\n\t\t\tfor (var i = 0; i < items.length; i++) {\n\t\t\t\trow = rows[i];\n\t\t\t\tif (!row) {\n\t\t\t\t\trow = rows[i] = {\n\t\t\t\t\t\theight: this.preferredHeight,\n\t\t\t\t\t\toffset: offset\n\t\t\t\t\t};\n\t\t\t\t} \n\t\t\t\trow.index = i;\n\t\t\t\trow.item = items[i];\n\t\t\t\trow.cell = null;\n\t\t\t\toffset += row.height;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/**\n\t\t * Tries to efficiently find a visible row within the given offset range.  It returns the\n\t\t * index of the first row found.\n\t\t * @param {Number} topOffset\n\t\t * @param {Number} bottomOffset\n\t\t * @method\n\t\t * @private\n\t\t */\n\t\t_findVisibleRowIndex (topOffset, bottomOffset) {\n\t\t\tvar range = this.visibleRange;\n\t\t\tvar rows = this.rows;\n\t\t\tvar row;\n\t\t\tvar mid = Math.floor(range.index + (range.length / 2));\n\t\t\tvar start = 0, end = rows.length;\n\t\t\t\n\t\t\tif (mid > rows.length - 1) {\n\t\t\t\tmid = Math.max(rows.length - 1, 0);\n\t\t\t}\n\t\t\t\n\t\t\twhile (end >= start && rows[mid]) {\n\t\t\t\trow = rows[mid];\n\t\t\t\tif (row.offset + row.height < topOffset) {\n\t\t\t\t\tstart = mid + 1;\n\t\t\t\t} else if (row.offset > bottomOffset) {\n\t\t\t\t\tend = mid - 1;\n\t\t\t\t} else {\n\t\t\t\t\tbreak; // first visible row found.\n\t\t\t\t}\n\t\t\t\tmid = start + Math.round((end - start) / 2);\n\t\t\t}\n\t\t\t\n\t\t\treturn mid;\n\t\t}\n\t\t\n\t\t/**\n\t\t * Call a method on the cell's delegate.\n\t\t * @param {sl.ui-listView.Cell} cell\n\t\t * @param {String} methodName\n\t\t * @param {Object} arg1\n\t\t * @param {Object} arg2\n\t\t * @param {Object} arg3\n\t\t * @method\n\t\t * @private\n\t\t */\n\t\t_callCellDelegate (cell, methodName, arg1, arg2, arg3) {\n\t\t\tvar delegate = cell.delegate;\n\t\t\tif (delegate) {\n\t\t\t\tdelegate[methodName](arg1, arg2, arg3);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name ui-listView\n\t * @description\n\t * Displays a list of items.  Designed to handle large data sets.\n\t */\n\treturn {\n\t\ttemplateUrl: \"ui-listView.tpl.html\",\n\t\treplace: true, // TODO: remove\n\t\ttransclude: true,\n\t\tscope: { options: \"=\"},\n\t\t\n\t\tcontroller: UIListView,\n\t\tcontrollerAs: \"listView\",\n\t\t\n\t\trequire: \"uiListView\",\n\t\tcompile (element, attrs) {\n\t\t\tvar match = arrayRegexp.exec(attrs.uiListView);\n\t\t\tif (!match) {\n\t\t\t\tthrow Error(\"Invalid expression.  It must be in the form \\\"item in Array\\\" \"); \n\t\t\t}\n\t\t\tvar itemIdentifier = match[1];\n\t\t\tvar arrayGetter = $parse(match[2]);\n\t\t\t\n\t\t\treturn function ($scope, element, attrs, listView) {\n\t\t\t\tvar rawElement = element[0];\n\t\t\t\tlistView.itemIdentifier = itemIdentifier;\n\t\t\t\t\n\t\t\t\t/**\n\t\t\t\t * Update the viewport.\n\t\t\t\t */\n\t\t\t\tfunction updateListView () {\n\t\t\t\t\tvar scrollTop = rawElement.scrollTop;\n\t\t\t\t\treturn listView.setViewport(scrollTop, rawElement.clientHeight);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfunction updateOptions(options, oldOptions) {\n\t\t\t\t\tif (oldOptions) {\n\t\t\t\t\t\tif (oldOptions.style) {\n\t\t\t\t\t\t\telement.removeClass(\"ui-list-view-\" + oldOptions.style);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (options.style) {\n\t\t\t\t\t\telement.addClass(\"ui-list-view-\" + options.style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$scope.$watch(\"options\", (options, oldOptions) => {\n\t\t\t\t\toptions = angular.extend(angular.copy(defaultOptions), options || {});\n\t\t\t\t\toptions.listView = listView;\n\t\t\t\t\tlistView.options = options;\n\t\t\t\t\tupdateOptions(options, oldOptions);\n\t\t\t\t\tlistView._reload();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tvar isScrolling; // For performance, don't retrieve items while the list is scrolling.\n\t\t\t\tvar endScrollDigestTimer;\n\t\t\t\t$scope.$watchCollection(() => {\n\t\t\t\t\treturn !isScrolling ? arrayGetter($scope.$parent) : listView.originalItems;\n\t\t\t\t}, (items) => {\n\t\t\t\t\tlistView._reload(items);\n\t\t\t\t\tupdateListView();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t$scope.$watch(() => {\n\t\t\t\t\treturn element[0].clientHeight;\n\t\t\t\t}, () => {\n\t\t\t\t\tupdateListView();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfunction handleScroll () {\n\t\t\t\t\tif (updateListView()) {\n\t\t\t\t\t\tisScrolling = true;\n\t\t\t\t\t\tsafeDigest($scope);\n\t\t\t\t\t\tisScrolling = false;\n\t\t\t\t\t}\n\t\t\t\t\tclearTimeout(endScrollDigestTimer);\n\t\t\t\t\tendScrollDigestTimer = setTimeout(() => {\n\t\t\t\t\t\tupdateListView();\n\t\t\t\t\t\tsafeDigest($scope);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\telement[0].addEventListener(\"scroll\", handleScroll, false);\n\t\t\t\t\n\t\t\t\t/** \n\t\t\t\t* Update row sizes and offsets if the window is resized.\n\t\t\t\t*/\n\t\t\t\tfunction handleResize () {\n\t\t\t\t\tupdateListView();\n\t\t\t\t\tsafeDigest($scope);\n\t\t\t\t}\n\t\t\t\twindow.addEventListener(\"resize\", handleResize);\n\t\t\t\t\n\t\t\t\t$scope.$on(\"$destroy\", () => {\n\t\t\t\t\twindow.removeEventListener(\"resize\", handleResize);\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\t};\n\t\n})\n\n.directive(\"uiListViewCell\", () => {\n\t\n\treturn {\n\t\trequire: \"^uiListView\",\n\t\tlink ($scope, element, attrs, listView, $transclude) {\n\t\t\tvar rawElement = element[0];\n\t\t\tvar cell = $scope.cell;\n\t\t\tvar transcludeScope;\n\t\t\t\n\t\t\t$transclude((clone, scope) => {\n\t\t\t\tvar content = element.children();\n\t\t\t\ttranscludeScope = scope;\n\t\t\t\tupdateRow(cell.row);\n\t\t\t\tcontent.empty();\n\t\t\t\tcontent.append(clone);\n\t\t\t});\n\t\t\t\n\t\t\tfunction updateOffset(offset) {\n\t\t\t\trawElement.style.top = offset + \"px\";\n\t\t\t}\n\t\t\t\n\t\t\tfunction updateSize() {\n\t\t\t\tvar height = rawElement.clientHeight;\n\t\t\t\tvar row = cell.row;\n\t\t\t\tif (height !== row.height) {\n\t\t\t\t\trow.height = height;\n\t\t\t\t\tlistView.requestOffsetUpdate(row.index);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfunction updateRow (row) {\n\t\t\t\ttranscludeScope[listView.itemIdentifier] = row.item;\n\t\t\t\tupdateOffset(row.offset);\n\t\t\t}\n\t\t\t\n\t\t\t$scope.$watch(() => {\n\t\t\t\treturn cell.row.index + \"-\" + rawElement.clientHeight;\n\t\t\t}, () => {\n\t\t\t\tupdateSize();\n\t\t\t});\n\t\t\t\n\t\t\tcell.delegate = {\n\t\t\t\trowDidChange: updateRow,\n\t\t\t\toffsetDidChange: updateOffset\n\t\t\t};\n\t\t\t\t\n\t\t\tupdateRow(cell.row);\n\t\t}\n\t};\n\t\n})\n\n.directive(\"uiListViewAnchor\", () => {\n\t\n\treturn {\n\t\trequire: \"^uiListView\",\n\t\tlink ($scope, element, attr, listView) {\n\t\t\tvar rawElement = element[0];\n\t\t\t\n\t\t\tlistView.anchor = {\n\t\t\t\tupdateAnchor (scrollHeight) {\n\t\t\t\t\trawElement.style.top = scrollHeight + \"px\";\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t}\n\t};\n\t\n});","angular.module(\"sl.ui-listView.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"ui-listView.tpl.html\",\"<div class=\\\"ui-list-view\\\">\\n\t<div class=\\\"ui-list-view-cell\\\" ui-list-view-cell ng-repeat=\\\"cell in listView.cells\\\">\\n\t\t<div class=\\\"ui-list-view-cell-content\\\"></div>\\n\t</div>\\n\t<div class=\\\"ui-list-view-anchor\\\" ui-list-view-anchor></div>\\n</div>\");}]);"],"sourceRoot":"/source/"}